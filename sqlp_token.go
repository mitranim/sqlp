package sqlp

import "fmt"

// Region of source text generated by `Tokenizer`.
type Token struct {
	Region
	Type
}

/*
Takes full source text and attempts to parse an atomic node corresponding to the
region and type of the current token. The output is always non-nil, but if the
source text doesn't match the token, or if the token's type can't be converted
to a single atomic node, this will panic. This is used internally by `Parser`.
*/
func (self Token) Node(src string) Node {
	switch self.Type {
	case TypeText:
		return self.NodeText(src)
	case TypeWhitespace:
		return self.NodeWhitespace(src).Node()
	case TypeQuoteSingle:
		return self.NodeQuoteSingle(src)
	case TypeQuoteDouble:
		return self.NodeQuoteDouble(src)
	case TypeQuoteGrave:
		return self.NodeQuoteGrave(src)
	case TypeCommentLine:
		return self.NodeCommentLine(src)
	case TypeCommentBlock:
		return self.NodeCommentBlock(src)
	case TypeDoubleColon:
		return self.NodeDoubleColon(src)
	case TypeOrdinalParam:
		return self.NodeOrdinalParam(src)
	case TypeNamedParam:
		return self.NodeNamedParam(src)
	default:
		panic(fmt.Errorf(`[sqlp] can't convert token %#v to node`, self))
	}
}

// Used by `Token.Node`.
func (self Token) NodeText(src string) NodeText {
	return NodeText(self.Slice(src))
}

// Used by `Token.Node`.
func (self Token) NodeWhitespace(src string) NodeWhitespace {
	return NodeWhitespace(self.Slice(src))
}

// Used by `Token.Node`.
func (self Token) NodeQuoteSingle(src string) NodeQuoteSingle {
	return NodeQuoteSingle(tryTrimPrefixSuffixByte(self.Slice(src), quoteSingle, quoteSingle))
}

// Used by `Token.Node`.
func (self Token) NodeQuoteDouble(src string) NodeQuoteDouble {
	return NodeQuoteDouble(tryTrimPrefixSuffixByte(self.Slice(src), quoteDouble, quoteDouble))
}

// Used by `Token.Node`.
func (self Token) NodeQuoteGrave(src string) NodeQuoteGrave {
	return NodeQuoteGrave(tryTrimPrefixSuffixByte(self.Slice(src), quoteGrave, quoteGrave))
}

// Used by `Token.Node`.
func (self Token) NodeCommentLine(src string) NodeCommentLine {
	return NodeCommentLine(tryTrimPrefix(self.Slice(src), commentLinePrefix))
}

// Used by `Token.Node`.
func (self Token) NodeCommentBlock(src string) NodeCommentBlock {
	return NodeCommentBlock(tryTrimPrefixSuffix(self.Slice(src), commentBlockPrefix, commentBlockSuffix))
}

// Used by `Token.Node`.
func (self Token) NodeDoubleColon(src string) NodeDoubleColon {
	reqStrEq(self.Slice(src), castPrefix)
	return NodeDoubleColon{}
}

// Used by `Token.Node`.
func (self Token) NodeOrdinalParam(src string) NodeOrdinalParam {
	return NodeOrdinalParam(tryParseInt(tryTrimPrefixByte(self.Slice(src), ordinalPrefix)))
}

// Used by `Token.Node`.
func (self Token) NodeNamedParam(src string) NodeNamedParam {
	return NodeNamedParam(tryTrimPrefixByte(self.Slice(src), namedPrefix))
}
